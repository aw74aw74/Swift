import Foundation
import CoreData

/// –ö–ª–∞—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Core Data.
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å—Ç–µ–∫–∞ Core Data, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
final class CoreDataManager {
    
    /// –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É Core Data.
    static let shared = CoreDataManager()
    
    /// –ò–º—è —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö Core Data (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .xcdatamodeld).
    private let modelName = "AppModel"
    
    // MARK: - Core Data Stack
    
    /// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ Core Data.
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
    private lazy var persistentContainer: NSPersistentContainer = {
        let container = NSPersistentContainer(name: modelName)
        container.loadPersistentStores(completionHandler: { (storeDescription, error) in
            if let error = error as NSError? {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫,
                // –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ç.–¥.
                print("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Core Data: \(error), \(error.userInfo)")
                // –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ,
                // –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
                // fatalError() –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥–∞ –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
            }
        })
        return container
    }()
    
    /// –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    var viewContext: NSManagedObjectContext {
        return persistentContainer.viewContext
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ–Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ.
    /// –§–æ–Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI.
    func newBackgroundTaskContext() -> NSManagedObjectContext {
        return persistentContainer.newBackgroundContext()
    }
    
    // MARK: - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    /// - Returns: `true` –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ `false`.
    @discardableResult
    func saveContext(context: NSManagedObjectContext? = nil) -> Bool {
        let contextToSave = context ?? viewContext
        if contextToSave.hasChanges {
            do {
                try contextToSave.save()
                print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç Core Data —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                return true
            } catch {
                let nserror = error as NSError
                print("üî¥ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Core Data: \(nserror), \(nserror.userInfo)")
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
                return false
            }
        }
        print("‚ÑπÔ∏è –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Core Data –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return true // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –î—Ä—É–∑—å—è–º–∏ (FriendCD)
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –¥—Ä—É–∑–µ–π –≤ Core Data.
    /// –ï—Å–ª–∏ –¥—Ä—É–≥ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.
    /// - Parameters:
    ///   - friends: –ú–∞—Å—Å–∏–≤ –º–æ–¥–µ–ª–µ–π `Friend` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    ///   - context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    func saveFriends(_ friends: [Friend], in context: NSManagedObjectContext? = nil) {
        let managedContext = context ?? viewContext
        
        managedContext.performAndWait { // –ò—Å–ø–æ–ª—å–∑—É–µ–º performAndWait –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            for friendModel in friends {
                let fetchRequest: NSFetchRequest<FriendCD> = FriendCD.fetchRequest()
                fetchRequest.predicate = NSPredicate(format: "id == %lld", friendModel.id)
                
                do {
                    let existingFriends = try managedContext.fetch(fetchRequest)
                    let friendCD: FriendCD
                    
                    if let existingFriend = existingFriends.first {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥—Ä—É–≥–∞
                        friendCD = existingFriend
                        print("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –≤ Core Data: ID \(friendModel.id)")
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞
                        friendCD = FriendCD(context: managedContext)
                        friendCD.id = Int64(friendModel.id) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Int –≤ Int64
                        print("‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ –≤ Core Data: ID \(friendModel.id)")
                    }
                    
                    friendCD.name = friendModel.name
                    friendCD.avatarUrl = friendModel.avatarUrl
                    friendCD.isOnline = friendModel.isOnline
                    
                } catch {
                    print("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –¥—Ä—É–≥–∞ –≤ Core Data: \(error)")
                }
            }
            saveContext(context: managedContext)
        }
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏–∑ Core Data.
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    /// - Returns: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ `FriendCD` –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    func fetchFriends(in context: NSManagedObjectContext? = nil) -> [FriendCD] {
        let managedContext = context ?? viewContext
        let fetchRequest: NSFetchRequest<FriendCD> = FriendCD.fetchRequest()
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        // let sortDescriptor = NSSortDescriptor(key: "name", ascending: true)
        // fetchRequest.sortDescriptors = [sortDescriptor]
        
        do {
            let friends = try managedContext.fetch(fetchRequest)
            print("‚ÑπÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ \(friends.count) –¥—Ä—É–∑–µ–π –∏–∑ Core Data.")
            return friends
        } catch {
            print("üî¥ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –∏–∑ Core Data: \(error)")
            return []
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏–∑ Core Data.
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    func deleteAllFriends(in context: NSManagedObjectContext? = nil) {
        let managedContext = context ?? viewContext
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = FriendCD.fetchRequest()
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        
        managedContext.performAndWait {
            do {
                try managedContext.execute(deleteRequest)
                saveContext(context: managedContext)
                print("‚ÑπÔ∏è –í—Å–µ –¥—Ä—É–∑—å—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ Core Data.")
            } catch {
                print("üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π –∏–∑ Core Data: \(error)")
            }
        }
    }
    
    // MARK: - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ì—Ä—É–ø–ø–∞–º–∏ (GroupCD)
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –≥—Ä—É–ø–ø –≤ Core Data.
    /// –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è.
    /// - Parameters:
    ///   - groups: –ú–∞—Å—Å–∏–≤ –º–æ–¥–µ–ª–µ–π `Group` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    ///   - context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    func saveGroups(_ groups: [Group], in context: NSManagedObjectContext? = nil) {
        let managedContext = context ?? viewContext
        
        managedContext.performAndWait {
            for groupModel in groups {
                let fetchRequest: NSFetchRequest<GroupCD> = GroupCD.fetchRequest()
                fetchRequest.predicate = NSPredicate(format: "id == %lld", groupModel.id)
                
                do {
                    let existingGroups = try managedContext.fetch(fetchRequest)
                    let groupCD: GroupCD
                    
                    if let existingGroup = existingGroups.first {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                        groupCD = existingGroup
                        print("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ Core Data: ID \(groupModel.id)")
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                        groupCD = GroupCD(context: managedContext)
                        groupCD.id = Int64(groupModel.id) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Int –≤ Int64
                        print("‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –≤ Core Data: ID \(groupModel.id)")
                    }
                    
                    groupCD.name = groupModel.name
                    groupCD.groupDescription = groupModel.description // –ò—Å–ø–æ–ª—å–∑—É–µ–º groupDescription
                    groupCD.photoUrl = groupModel.avatarUrl // –ò—Å–ø–æ–ª—å–∑—É–µ–º avatarUrl –∏–∑ –º–æ–¥–µ–ª–∏ Group
                    groupCD.membersCount = Int32(groupModel.membersCount) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Int32
                    
                } catch {
                    print("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –≤ Core Data: \(error)")
                }
            }
            saveContext(context: managedContext)
        }
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ Core Data.
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    /// - Returns: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ `GroupCD` –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    func fetchGroups(in context: NSManagedObjectContext? = nil) -> [GroupCD] {
        let managedContext = context ?? viewContext
        let fetchRequest: NSFetchRequest<GroupCD> = GroupCD.fetchRequest()
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        // let sortDescriptor = NSSortDescriptor(key: "name", ascending: true)
        // fetchRequest.sortDescriptors = [sortDescriptor]
        
        do {
            let groups = try managedContext.fetch(fetchRequest)
            print("‚ÑπÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ \(groups.count) –≥—Ä—É–ø–ø –∏–∑ Core Data.")
            return groups
        } catch {
            print("üî¥ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ Core Data: \(error)")
            return []
        }
    }
    
    /// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ Core Data.
    /// - Parameter context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `viewContext`.
    func deleteAllGroups(in context: NSManagedObjectContext? = nil) {
        let managedContext = context ?? viewContext
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = GroupCD.fetchRequest()
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        
        managedContext.performAndWait {
            do {
                try managedContext.execute(deleteRequest)
                saveContext(context: managedContext)
                print("‚ÑπÔ∏è –í—Å–µ –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ Core Data.")
            } catch {
                print("üî¥ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ Core Data: \(error)")
            }
        }
    }
    
    // MARK: - –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ü—Ä–∏–º–µ—Ä)
    
    private let lastUpdateFriendsKey = "lastUpdateFriendsTimestamp"
    private let lastUpdateGroupsKey = "lastUpdateGroupsTimestamp"
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä—É–∑—å—è—Ö.
    func setLastUpdateTimestampForFriends(date: Date = Date()) {
        UserDefaults.standard.set(date, forKey: lastUpdateFriendsKey)
        print("‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: \(date)")
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä—É–∑—å—è—Ö.
    /// - Returns: `Date` –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ `nil`, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    func getLastUpdateTimestampForFriends() -> Date? {
        return UserDefaults.standard.object(forKey: lastUpdateFriendsKey) as? Date
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö.
    func setLastUpdateTimestampForGroups(date: Date = Date()) {
        UserDefaults.standard.set(date, forKey: lastUpdateGroupsKey)
        print("‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø: \(date)")
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö.
    /// - Returns: `Date` –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ `nil`, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    func getLastUpdateTimestampForGroups() -> Date? {
        return UserDefaults.standard.object(forKey: lastUpdateGroupsKey) as? Date
    }
}
